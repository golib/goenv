#!/usr/bin/env bash
#
# Summary: Set or show the local project-specific Golang version
#
# Usage: goenv local <version>
#        goenv local --unset
#
# Sets the local project-specific Golang version by writing the
# version name to a file named `.go-version'.
#
# When you run a Golang command, goenv will look for a `.go-version'
# file in the current directory and each parent directory. If no such
# file is found in the tree, goenv will use the global Golang version
# specified with `goenv global'. A version specified with the
# `GOENV_VERSION' environment variable takes precedence over local
# and global versions.
#
# For backwards compatibility, goenv will also read version
# specifications from `.goenv-version' files, but a `.go-version'
# file in the same directory takes precedence.
#
# <version> should be a string matching a Golang version known to goenv.
# The special version string `system' will use your default system Golang.
# Run `goenv versions' for a list of available Golang versions.

set -e
[ -n "$GOENV_DEBUG" ] && set -x

# Provide goenv completions
if [ "$1" = "--complete" ]; then
  echo --unset
  echo system
  exec goenv-versions --bare
fi

GOENV_VERSION="$1"

if [ "$GOENV_VERSION" = "--unset" ]; then
  rm -f .go-version
elif [ -n "$GOENV_VERSION" ]; then
  goenv-version-file-write .go-version "$GOENV_VERSION"
else
  goenv-version-file-read .go-version ||
  { echo "goenv: no local version configured for current directory"
    exit 1
  } >&2
fi
